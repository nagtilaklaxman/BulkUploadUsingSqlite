@using BlazorWebAssemblyClient.Models
@using System.Linq
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@using BlazorWebAssemblyClient.Services
@inject IHttpApiService Http
@inject ILogger<FileUpload> Logger
<div class="card mb-2">
    <div class="card-header">
        @Title
    </div>
    <div class="card-body">
        <div class="row">
            <div class="form-group col col-6">
                <label for="files"> Select File to Upload Bulk Data</label>
                <InputFile OnChange="OnInputFileChange" class="form-control-file" ></InputFile>
                <!-- <input id="files" type="file" accept=".xlsx" required name="formFile" class="form-control-file"> -->
            </div>
            <div class="form-group col col-4">
                <label for="SelectRecord">Select Records To Upload</label>
                <select @bind="RecordsToUpload">
                    <option value="100">100</option>
                    <option value="200">200</option>
                    <option value="500">500</option>
                </select>

            </div>
            <div class="form-group col col-2">
                <a href="~/RegistrationTemplate.xlsx" Target="_blank">Download Template</a>
            </div>
        </div>
        <div class="row">
            <div class="col text-center">
                <input type="button" value="Upload" class="btn btn-info submit" @onclick="OnUploadClick">
            </div>

        </div>
        @if (files.Count > 0)
        {
            <div class="card">
                <div class="card-body">
                    <ul>
                        @foreach (var file in files)
                        {
                            <li>
                                File: @file.Name
                                <br>
                                @if (IsFileUpload(uploadResults, file.Name, Logger,
                                 out var result))
                                {
                                    <span>
                                        Stored File Name: @result.StoredFileName
                                    </span>
                                }
                                else
                                {
                                    <span>
                                        There was an error uploading the file
                                        (Error: @result.ErrorCode).
                                    </span>
                                }
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }

    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }
    public int RecordsToUpload { get; set; }
    private List<File> files = new();
    private List<FileUploadResult> uploadResults = new();
    private IReadOnlyList<IBrowserFile> browserFiles;
    private int maxAllowedFiles = 1;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private async Task OnUploadClick()
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1024 * 15;
        var upload = false;
        using var content = new MultipartFormDataContent();
        foreach (var file in browserFiles)
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType =
                        new MediaTypeHeaderValue(file.ContentType);

                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"file\"",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}",
                        file.Name, ex.Message);

                    uploadResults.Add(
                        new()
                        {
                            FileName = file.Name,
                            ErrorCode = 6,
                            Uploaded = false
                        });
                }
            }
        }

        if (upload)
        {
            var response = await Http.UploadFile<FileUploadResult>("Filesave", content);

            if (response is not null)
            {
                uploadResults.Add(response);
            }
        }

        shouldRender = true;
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        browserFiles = e.GetMultipleFiles(maxAllowedFiles);
    }

    private static bool IsFileUpload(IList<FileUploadResult> uploadResults,
        string? fileName, ILogger<FileUpload> logger, out FileUploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }
}
